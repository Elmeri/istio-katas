!INCLUDE "markdown-source/meta.md"
[//]: # (Tags: #sentences #kiali)

# Traffic in and out of mesh

## Learning goals

- Understand Istio gateways (ingress)
- Understand how to access external services
- Understand Istio gateways (egress)

## Introduction

These exercises will introduce you to Istio concepts and CRD's for configuring 
traffic **into** the service mesh (Ingress) and out of the service mesh (Egress). 

You will use two Istio CRD's for this. The **Gateway** and the **ServiceEntry** 
CRD's. 

## Exercise 1

The previous exercises used a Kubernetes **NodePort** service to get traffic 
to the sentences service. E.g. the **ingress** traffic to `sentences` **was 
not** flowing through the Istio service mesh. From the `sentences` 
service to the `age` and `name` services traffic **was** flowing through the 
Istio service mesh. We know this to be true because we have applied virtual 
services and destination rules to the `name` service.

Ingressing traffic directly from the Kubernetes cluster network to a frontend
service means that Istio features **cannot** be applied on this part of the 
traffic flow.

<details>
    <summary> More Info </summary>

A Gateway **describes** a load balancer operating at the **edge** of the mesh 
receiving incoming or outgoing **HTTP/TCP** connections. The specification 
describes the ports to be expose, type of protocol, configuration for the 
load balancer, etc.

An Istio **Ingress** gateway in a Kubernetes cluster consists, at a minimum, of a 
Deployment and a Service. Istio ingress gateways are based on the Envoy and have a 
standalone Envoy proxy. 

Inspecting our course environment would show something like:

```console
NAME                                        TYPE                                   
istio-ingressgateway                        deployment  
istio-ingressgateway                        service
istio-ingressgateway-69c77d896c-5vvjg       pod
```

Inspecting the POD would show something like:

```console
NAME                                    CONTAINERS
istio-ingressgateway-69c77d896c-5vvjg   istio-proxy
```

</details>

In this exercise we are going rectify this by **configuring** ingress traffic 
to the sentences service through a dedicated **ingress** 
gateway(`istio-ingressgateway`) provided by **Istio**.

We are going to do this by defining a gateway.

```yaml
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: my-app-gateway
spec:
  selector:
    app: istio-ingressgateway
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "my-app.example.com"
```

The servers block is where you define the port configurations, protocol 
and the hosts exposed by the gateway. A host entry is specified as a dnsName 
and should be specified using the FQDN format. 

The **selectors** above are the labels on the `istio-ingressgateway` POD which 
is running a standalone Envoy proxy.

The gateway defines and entry point to be exposed in the `istio-ingressgateway`. 
That is it. Nothing else. This entry point knows nothing about how to route the 
traffic to the desired destination within the mesh. In order to route the 
traffic we, of course, use a virtual service. 

```yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: my-app
spec:
  hosts:
  - "my-app.example.com"
  gateways:
  - my-app-gateway
  http:
  - route:
    - destination:
        host: my-app-frontend
```

Note how it specifies the hostname and the name of the gateway 
(in `spec.gateways`). A gateway definition can define an entry for many 
hostnames and a VirtualService can be bound to multiple gateways, i.e. these 
are not necessarily related one-to-one.

### Overview

- Deploy the sentences app

- Create an entry point for the sentences service

> :bulb: The FQDN you will use should be 
> `<YOUR_NAMESPACE>.sentences.istio.eficode.academy`.

- Create a route from the entry point to the sentences service

- Run the loop query script with the `-g` option and FQDN

- Observe the traffic flow with Kiali

### Step by Step
<details>
    <summary> More Details </summary>

**Deploy the sentences app**

```console
kubectl apply -f 003-traffic-in-out-mesh/start/
kubectl apply -f 003-traffic-in-out-mesh/start/name-v1/
```

**Create an entry point for the sentences service**

Create a file called `sentences-ingressgateway.yaml` in 
`003-traffic-in-out-mesh/start` directory.

It should look like the below yaml. 

> :bulb: Replace <YOUR_NAMESPACE> in the yaml below with the namespace you 
> have been assigned in this course. Otherwise you might not hit the 
> `sentence` service in your namespace.

```yaml
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: sentences
spec:
  selector:
    app: istio-ingressgateway
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "<YOUR_NAMESPACE>.sentences.istio.eficode.academy"
```

Apply the resource:

```console
kubectl apply -f 003-traffic-in-out-mesh/start/sentences-ingressgateway.yaml
```

**Create a route from the gateway to the sentences service**

Create a file called `sentences-ingressgateway-vs.yaml` in 
`003-traffic-in-out-mesh/start` directory.

```yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: sentences
spec:
  hosts:
  - "<YOUR_NAMESPACE>.sentences.istio.eficode.academy"
  gateways:
  - sentences
  http:
  - route:
    - destination:
        host: sentences
```

The VirtualService routes all traffic for the given hostname
to the `sentences` service (the two last lines specifying the Kubernetes
`sentences` service as destination).

Apply the resource:

```console
kubectl apply -f 003-traffic-in-out-mesh/start/sentences-ingressgateway-vs.yaml
```

**Run the loop query script with the `hosts` entry**

The sentence service we deployed in the first step has a type of `ClusterIP` 
now. In order to reach it we will need to go through the `istio-ingressgateway`. 

Run the `loop-query.sh` script with the option `-g` and pass it the `hosts` entry.

```console
./scripts/loop-query.sh -g <YOUR_NAMESPACE>.sentences.istio.eficode.academy
```

**Observe the traffic flow with Kiali**

Now we can see that the traffic to the `sentences` service is no longer 
**unknown** to the service mesh. 

![Ingress Gateway](images/kiali-ingress-gw.png)

</details>

## Exercise 2

A ServiceEntry allows you to apply Istio traffic management for services 
running **outside** of your mesh. Your service might use an external API 
as an example. Once you have defined a service entry you can configure 
virtual services and destination rules to apply Istio features like 
redirecting or forwarding traffic to external destinations, defining 
retries, timeouts and fault injection policies. 

By default, Istio configures Envoy proxies to **passthrough** requests to 
unknown services. So, technically they are not required. But without them 
you can't apply Istio features. 

There is also the security aspect to consider. While securely controlling 
ingress traffic is the highest priority, it is good policy to securely control 
egress traffic also. As part of this many clusters will have the 
`outBoundTrafficPolicy` set to `REGISTRY_ONLY`. This will force you to define 
your external services with a service entry.

> :bulb: In our environment we have set the outBoundTrafficPolicy to 
> `REGISTRY_ONLY`. You will not be able to reach external services without 
> defining a service entry.

In this exercise we will define a service entry for [httpbin](https://httpbin.org/) 
and create a virtual service with a timeout of 3 seconds to prove we can use 
Istio features.

### Overview

- Deploy multitool which will be used to reach httpbin from within the mesh

- Run `./scripts/external-service-query.sh` and observe response

- Define a service entry for httpbin.org

- Run `.scripts/external-service-query.sh` and observe response

- Create a virtual service with a timeout of 3 seconds

- Run `.scripts/external-service-query.sh http://httpbin.org/delay/5`

### Step by Step
<details>
    <summary> More Details </summary>

**Deploy multitool**



</details>

# Summary

XXX

# Cleanup

```console

```
