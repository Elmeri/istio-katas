!INCLUDE "markdown-source/meta.md"
[//]: # (Tags: #sentences #kiali)

# Introducing the setup

## Learning goal

- Try out the sentences application
- Add the applications traffic to the istio service mesh
- Familiarize yourself with the Kiali management console

## Introduction

This exercise introduces the sentences application which you will be using during the course.
It also introduces you to the Kiali management console for the Istio service mesh.

In the beginning of the exercise you will deploy the sentences application 
and generate traffic between the services. But there will be no Envoy sidecars 
injected and Kiali will not be able to observe the traffic.

Afterwards you will use a couple of different methods to enable sidecars. This 
will allow Kiali to observe the traffic.

<details>
    <summary> :bulb: More Info on the micro service application and Kiali </summary>

### Sentences application

This application implements a simple 'sentences' builder, which can build
sentences from the following simple algorithm:

```
age = random(0,100)
name = random(['Peter','Ray','Egon'])
return name + ' is ' + age + ' years'
```
The application is made up of three services, one which can be queried for the
random age, one which can be queried for a random name and a frontend sentence service, which
calls the two other through HTTP requests and formats the final sentences.

The source code for the application can be seen in the  [sentences-app/](sentences-app/) folder.

### Kiali

Kiali provides dashboards and observability by showing you the structure and 
health of your service mesh. It provides detailed metrics, Grafana access and 
integrates with Jaeger for distributed tracing.

One of it's most powerful features are it's graphs. They provide a powerful way 
to visualize the topology oy your service mesh. 

It provides four main graph renderings of the mesh telemetry.

* The **workload** graph provides a detailed view of communication between workloads.

* The **app** graph aggregates the workloads with the same `app` labeling, which provides a more logical view.

* The **versioned app** graph aggregates by app, but breaks out the different versions providing traffic breakdowns that are version-specific.

* The **service** graph provides a high-level view, which aggregates all traffic for defined services.

![Kiali overview](images/kiali-overview.png)

We are using Kiali to visualize the work done in this Istio course.

</details>

## Exercise: Get Familiar with Istio and Kiali.

In this exercise, we are first deploying our application with vanilla Kubernetes.
We then visit the Kiali website to see that without a sidecar, our service will not be included in istio.
Final thing for the exercise is to enable Istio sidecar and see the traffic flowing in Kiali.

### overview

- Deploy the sentences application with kubectl 

> :bulb: It is located under the `000-setup-introduction/` directory.

- Observe the number of pods running

- Run the script `scripts/loop-query.sh` to produce traffic

- Open Kiali and find the sentences application

> Browse to **Applications** on the left hand menu and select `sentences`.
> View the info and browse traffic and metrics tabs.

- Pull the sentences application down.

- Enable automatic sidecar injection for **your** namespace

> Label **your** namespace(user1, user2, etc) with `istio-injection=enabled`.

- Redeploy sentences application

- Run the `loop-query.sh` script to produce traffic.

- Investigate the different graphs provided by kiali.

- Disable automatic sidecar injection for the `age` service

> In `spec.template.metadata.annotations` of the `age` service deployment 
> add the annotation `sidecar.istio.io/inject: 'false'` and re-deploy the 
> service.

- Inject sidecar for the `age` service

### Step by Step
<details>
    <summary> More Details </summary>

- **Deploy the sentences application**

Open a terminal in the root of the git repository (istio-katas) and use `kubectl` to deploy `v1` of the application.

```console
kubectl apply -f 000-setup-introduction/
```

- **Observe the number of services and pods running**

```console
kubectl get pod,svc
```

You should see something like:

```console
NAME                             READY   STATUS    RESTARTS   AGE
pod/age-7976688957-mbvzz         1/1     Running   0          2s
pod/name-v1-587b56cdf4-rwcwt     1/1     Running   0          2s
pod/sentences-6dffccb8c6-7fd57   1/1     Running   0          2s

NAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
service/age         ClusterIP   172.20.123.133   <none>        5000/TCP         2s
service/name        ClusterIP   172.20.108.51    <none>        5000/TCP         2s
service/sentences   NodePort    172.20.168.218   <none>        5000:30326/TCP   2s
```

- **Run the `loop-query.sh` script** 

Run the following to continuously query the sentence service and observe the output.

Do this is a **new** terminal.

```console
./scripts/loop-query.sh
```

You should see output from the shell that looks like this.

```console
Using 10.0.36.130:30459, header ''
Egon is 40 years.
Ray is 16 years.
Peter is 38 years.
Peter is 19 years.
Ray is 66 years.
```

Traffic is now flowing between the services. But that **doesn't** mean it is part of 
the service mesh yet...

- **Open Kiali and find the sentences application**

Make sure **Namespace** is selected from the drop down at the top left and 
enter **your** namespace.

![Select Namespace](images/kiali-namespace-select.png)

Browse to **Applications** on the left hand menu and select `sentences`.

You will see the application, workloads and services are discovered by Kiali. 
But not much else.

The red icons beside the workloads mean we have no istio sidecars deployed.
Browse the different tabs to see that there is no traffic nor metrics being captured. 
As there are no sidecars the traffic is **not** part of the istio service mesh.

![Sentences with no sidecars](images/kiali-no-sidecars.png)

- **Pull sentences application down**

```console
kubectl delete -f 000-setup-introduction/
```

- **Enable automatic sidecar injection**

```console
kubectl label namespace <YOUR_NAMESPACE> istio-injection=enabled
```

- **Redeploy sentences application**

```console
kubectl apply -f 000-setup-introduction/
```

Observe the number of services and pods running.

```console
kubectl get pod,svc
```

You should see two containers per POD.

```console
NAME                                READY   STATUS    RESTARTS   AGE
pod/age-v1-6fccc84ff-kkdgn          2/2     Running   0          4m4s
pod/name-v1-6644f45d6f-lndkm        2/2     Running   0          4m4s
pod/sentences-v1-5bbf7bcfcb-fphpp   2/2     Running   0          4m4s

NAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
service/age         ClusterIP   172.20.228.238   <none>        5000/TCP         4m5s
service/name        ClusterIP   172.20.213.23    <none>        5000/TCP         4m4s
service/sentences   NodePort    172.20.106.197   <none>        5000:32092/TCP   4m4s
```

Run the following command to observe envoy proxy.

```console
kubectl get pods -o=custom-columns=NAME:.metadata.name,CONTAINERS:.spec.containers[*].name
```

This should show an istio proxy sidecar for each service.

```console
NAME                            CONTAINERS
age-v1-676bf56bdd-m6bcj         age,istio-proxy
name-v1-587b56cdf4-6tnhs        name,istio-proxy
sentences-v1-6ccc9fdcc5-fzt2g   sentences,istio-proxy
```

- **Run the loop-query.sh script**

```console
./scripts/loop-query.sh
```

- **Browse kiali and investigate the traffic flow**

Browse to **Applications** on the left hand menu and select `sentences`.

> Remember to filter by **your** namespace.

Now you can see there are sidecars and the traffic is part of the mesh. 

- Browse the different tabs to see the traffic and metrics being captured.

> :bulb: It may take a minute before Kiali starts showing the traffic and 
> metrics. You can change the refresh rate in the top right hand corner.

![Sentences with sidecars](images/kiali-with-sidecars.png)


- **Disable automatic sidecar injection for the `age` service**

Edit the file `000-setup-introduction/age.yaml` and add the annotation 
`sidecar.istio.io/inject: 'false'`.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sentences
    mode: age
    version: v1
  name: age-v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sentences
      mode: age
      version: v1
  template:
    metadata:
      labels:
        app: sentences
        mode: age
        version: v1
      annotations:                          # Annotations block
        sidecar.istio.io/inject: 'false'    # Enable or Disable sidecar injection
    spec:
      containers:
      - image: praqma/istio-sentences:v1
        name: age
        ports:
          - containerPort: 5000
        env:
        - name: "SENTENCE_MODE"
          value: "age"
```

Apply the changes to the `age.yaml` file.

```console
kubectl apply -f 000-setup-introduction/age.yaml
```

Use kubectl to see the number of pods running.

```console
kubectl get pods
```

You should, eventually, see that the `age` service has only **one** pod. E.g. it no 
longer has a sidecar and is **not** part of the service mesh.

```console
NAME                            READY   STATUS    RESTARTS   AGE
age-v1-574bfbb6b4-qb6rv         1/1     Running   0          3m50s
name-v1-795cf79f69-clrw4        2/2     Running   0          8m41s
sentences-v1-7cfbb658b6-rthxn   2/2     Running   0          8m41s
```

> Using automatic sidecar injection is the recommended way to add services 
> to the mesh as it is provides a more **pervasive** and homogenous approach. 
> If you do not want a sidecar for a service, use an **opt out** approach.

- **Inject sidecar for the `age` service**

You can manually inject sidecars to services. Even if the deployment is 
annotated. 

Run the following command to inject a sidecar for the `age` service.

```console
cat 000-setup-introduction/age.yaml |grep -v inject | kubectl apply -f -
```

Use kubectl to see the number of pods running.

```console
kubectl get pods
```

You should now see that the `age` service has **two** pods. E.g. it has 
a sidecar and is **again** part of the service mesh.

```console
NAME                            READY   STATUS    RESTARTS   AGE
age-v1-7b9f67b7dc-qxlxx         2/2     Running   0          76s
name-v1-795cf79f69-clrw4        2/2     Running   0          16m
sentences-v1-7cfbb658b6-rthxn   2/2     Running   0          16m
```

- **Investigate the different graphs**

Browse to the **graphs** and investigate the service, workload, app 
and versioned app graphs from the drop down at the top.

> :bulb: Use the display options to modify what is shown in the 
> different graphs. Showing request distribution is something
> we will be using often. Also ensure you are running the 
> `loop-query.sh` script to generate traffic.

![Graph Details](images/kiali-details.png)

</details>

# Summary

This Exercise introduced you to the sentences application and Kiali. There is not 
enough time in the course to go into much more details around Kiali. But it has 
more features like the Istio Wizards feature which lets you create and delete 
istio configuration on the fly. It can do validation on the most common Istio 
objects and more. See the [documentation](https://kiali.io/documentation/latest/features/) 
for a more complete overview.

You also injected sidecars with automatic sidecar injection, disabled sidecars 
with an annotation and manually injected a sidecar from the command line. 
Automatic sidecar injections is recommended. Manually injecting sidecars or 
using annotations is not a cohesive approach.

Automatic sidecar injection ensures a more **pervasive** and homogenous approach 
for traffic management and observability. It is less intrusive as it happens at 
the pod level and you won't see any changes to the deployment itself.

You can find more information about the two different methods [here](https://istio.io/latest/docs/setup/additional-setup/sidecar-injection/).

And you can find more details about sidecar configuration [here](https://istio.io/latest/docs/concepts/traffic-management/#sidecars).

# Cleanup

```console
kubectl delete -f 000-setup-introduction/
```
